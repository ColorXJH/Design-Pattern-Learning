1：设计模式
--目的：编写软件过程中，程序员面临着来自耦合性，内聚性以及可维护性，可扩展性，重用性，灵活性
--等多方面的挑战，设计模式是为了让软件具有更好的
    --代码重用性
    --可读性
    --可扩展性
    --可靠性
    --最终使程序出现高内聚低耦合的特点
    --设计模式是面向对象分析和设计的精要，OOA/D
--1：使用uml类图画出原型设计模式核心角色
--2：原型设计模式的深拷贝和浅拷贝是什么，并写出深拷贝的两种方式源码（重写clone方法，使用序列化来实现深拷贝）
--3: 在spring框架中哪里使用到了原型模式，并从源码分析
     --beans.xml
     --<bean id="demo01" class="com.master.model.monster" scope="prototype"/>
     ApplicationContext apt=new ClassPathXmlApplicationContext("beans.xml");
     --通过id获取monster对象
     Object bean=apt.getBean("demo01");
     --这里的getBean方法会调用doGetBean方法，doGetBean方法又会去判断是否为原型对象（mbd.isPrototype()）
     --如果是就会去创建bean:createBean
--4：设计模式的7大原则：7大设计原则核心思想 能够以类图说明设计原则 实际项目中哪里使用了ocp原则（开闭原则）
     --单一职责原则
       --对类来说的，即一个类应该只负责一项职责（逻辑较少时可以在方法级别遵循单一职责）
     --接口隔离原则
       --客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上

     --依赖倒置原则
     --里氏替换原则
     --开闭原则ocp
     --迪米特法则
     --合成复用原则
--5: 对于项目有多个状态的，可以使用状态模式
--6: 解释器设计模式是什么，画出uml类图，并指出各个角色，spring框架中哪里用到该模式，并做到源码级别的分析
--7: 单例设计模式的几种实现方式，各种实现方式的优缺点
     --设计模式一共有8种写法，饿汉模式两种 懒汉模式三种 双重检查 静态内部类 枚举
--8: 设计模式是对软件设计中普遍存在（反复出现）的各种问题，所提出的解决方案
